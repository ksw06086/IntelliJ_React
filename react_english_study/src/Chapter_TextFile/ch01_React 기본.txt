** node_modules - git에 올라가지 않음 너무 큼
: 이 프로젝트 실행할 때 사용되는 dependency 파일들이 모두 들어있음 => package.json dependencies 부분(삭제하더라도 npm install 해주면 다시금 설치가 됨
++ "start": "react-scripts start", : 개발모드로 프로그램 실행
++ "build": "react-scripts build", : 실제 배포모드로 만들어줌
++ "test": "react-scripts test", :
++ "eject": "react-scripts eject" : 내부 설정파일을 꺼냄, 웹페이지나 바벨설정 변경하고 싶을 때 사용
** public -> index.html
: <div id="root"></div> - 이걸로 react를 실행되어서 만들어진 DOM이 구현되게 됨
** 대부분의 작업들은 src 폴더에서 하게 됨
** src -> index.js : import App from './App';이 App.js를 불러옴
** const root = ReactDOM.createRoot(document.getElementById('root'));
   root.render(
     <React.StrictMode>
       <App />
     </React.StrictMode>
   );
   +++ id가 root인 곳에 App.js를 Rendering 시켜준다.

** import reportWebVitals from './reportWebVitals';
** // If you want to start measuring performance in your app, pass a function
   // to log results (for example: reportWebVitals(console.log))
   // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
   reportWebVitals();
   +++ 퍼포먼스 관련된 내용

** Hot Module Replacement(HMR) : App.js에서 수정 변경하고 저장하면 바로 웹에 반영이 되는 것

** App.js : 태그 속성 중 class="이름"이 아니라 className="이름"으로 하는 것은 의미는 똑같은데 js에 class가 있어서 바꾸어준 것(Ajax에서도 그래서 className 속성이 있는 것, JSX에서도 볼 수 있음)
** JSX : js내부에 html처럼 작성하는 것

** React로 만든 페이지는 Component로 되어 있음 page단위로 html을 작성하는게 아닌 각 부분을 component로 만들어서 조립해서 사용함
++ 비슷한 부분은 코드를 재사용할 수 있고 유지보수도 쉬워짐


